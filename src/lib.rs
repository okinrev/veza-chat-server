//! # Veza Chat Server - Serveur de chat temps r√©el en Rust
//! 
//! Serveur WebSocket haute performance avec authentification JWT,
//! messagerie unifi√©e (DM/Rooms), s√©curit√© renforc√©e et fonctionnalit√©s avanc√©es.
//! 
//! ## Fonctionnalit√©s
//! 
//! - üîê **Authentification s√©curis√©e** avec JWT et 2FA
//! - üí¨ **Messagerie unifi√©e** DM et salons publics/priv√©s  
//! - üõ°Ô∏è **S√©curit√© avanc√©e** avec filtrage de contenu et audit
//! - ‚ö° **Performance optimis√©e** avec cache Redis et pooling
//! - üì± **Temps r√©el** avec WebSocket et √©v√©nements
//! - üéØ **Production-ready** avec monitoring et logging
//! 
//! ## Architecture
//! 
//! ```text
//! ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
//! ‚îÇ   WebSocket     ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ   Chat Server    ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ   PostgreSQL    ‚îÇ
//! ‚îÇ   Clients       ‚îÇ    ‚îÇ   (Rust/Tokio)   ‚îÇ    ‚îÇ   Database      ‚îÇ
//! ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
//!                               ‚îÇ
//!                               ‚ñº
//!                        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
//!                        ‚îÇ   Redis Cache    ‚îÇ
//!                        ‚îÇ   (Sessions)     ‚îÇ
//!                        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
//! ```

pub mod auth;
pub mod cache;
pub mod client;
pub mod config;
pub mod error;
pub mod hub;
pub mod message_handler;
// TODO: R√©activer apr√®s migration DB
// pub mod message_store;
// pub mod message_store_simple;
pub mod messages;
pub mod models;
pub mod moderation;
pub mod monitoring;
pub mod permissions;
pub mod presence;
pub mod rate_limiter;
pub mod reactions;
pub mod security;
pub mod security_enhanced;
pub mod services;
pub mod utils;
pub mod validation;
pub mod websocket;

// Re-exports publics
pub use auth::Claims;
// pub use auth::TokenData; // Private dans auth.rs
pub use config::ServerConfig;
pub use error::{ChatError, Result};
pub use models::*;
// TODO: R√©activer apr√®s impl√©mentation compl√®te
// pub use services::ChatService;
// pub use websocket::{WebSocketHandler, WebSocketMessage};

/// Version du serveur
pub const VERSION: &str = env!("CARGO_PKG_VERSION");

/// Message de bienvenue avec informations syst√®me
pub fn welcome_message() -> String {
    format!(
        r#"
üöÄ Veza Chat Server v{} 
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ Serveur WebSocket haute performance
üîê Authentification JWT + 2FA  
üí¨ Messagerie unifi√©e (DM + Salons)
üõ°Ô∏è S√©curit√© renforc√©e avec audit
‚ö° Cache Redis int√©gr√©
üìä Monitoring et m√©triques

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
        "#,
        VERSION
    )
}

/// Initialise et lance le serveur de chat
pub async fn initialize_server() -> Result<()> {
    // TODO: Impl√©menter ChatService
    // let config = ServerConfig::from_env()?;
    // let service = ChatService::new(config).await?;
    // Ok(service)
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_version_format() {
        assert!(!VERSION.is_empty());
        assert!(VERSION.contains('.'));
    }

    #[test]
    fn test_welcome_message() {
        let message = welcome_message();
        assert!(message.contains("Veza Chat Server"));
        assert!(message.contains(VERSION));
    }
} 